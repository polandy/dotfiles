set nocompatible       " use Vim defaults (much better!)
if $SHELL =~ 'bin/fish'
  set shell=/bin/sh
endif

" allow portable .vim and .vimrc location
" set default 'runtimepath' (without ~/.vim folders)
let &runtimepath = printf('%s/vimfiles,%s,%s/vimfiles/after', $VIM, $VIMRUNTIME, $VIM)

" what is the name of the directory containing this file?
let s:portable = expand('<sfile>:p:h')

" add the directory to 'runtimepath'
let &runtimepath = printf('%s,%s,%s/after', s:portable, &runtimepath, s:portable)


" function key mappings
map OP <F1>
map OQ <F2>
map OR <F3>
map OS <F4>
map [15~ <F5>
map [20~ <F9>
map [23~ <F11>
map [24~ <F12>
map [1;5D <C-left>
map [1;5C <C-right>

" F1: set number
nmap <F1> :set number
" F2: set nonumber
nmap <F2> :set nonumber
" F3: run rake
nmap <F3> :w:Rake SPEC=%:p
" F4: check linting (see file types below)
" F5: execute current file
nmap <F5> :w:!./%
" F9: Paste toggle
set pastetoggle=[20~
" F12: NERDTroggle
nmap <F11> :NERDTreeTabsClose
" F12: NERDTroggle
nmap <F12> :NERDTreeFocusToggle

" load pathogen modules
execute pathogen#infect()

" deoplete config
let g:deoplete#enable_at_startup = 1
" deoplete tab-complete
inoremap <silent><expr> <C-n> pumvisible() ? "\<C-n>" : deoplete#mappings#manual_complete()
inoremap <silent><expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"

" ultisnips config
let g:UltiSnipsExpandTrigger="<c-e>"
let g:UltiSnipsJumpForwardTrigger="<c-f>"
let g:UltiSnipsJumpBackwardTrigger="<c-b>"


" syntastic config
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0
let g:syntastic_enable_highlighting = 1
" let g:syntastic_auto_jump = 3

map <C-s> :w:SyntasticCheck
map <C-q> :SyntasticReset


" true color for neovim
let $NVIM_TUI_ENABLE_TRUE_COLOR = 1

syntax on	" Highlight syntax
set background=dark
colorscheme gruvbox
filetype on
filetype plugin on
filetype indent on	" auto indent
set number
set bs=indent,eol,start	" allow backspacing over everything in insert mode
set ruler	" show the cursor position all the time
set hlsearch	 " highlight search patterns
set path=** 	" find files in subdirectories
set autoindent	" handy for email and programming
set remap	" hm. don't recall, but I know I like it.  ;-)
set report=1	" *always* show me changes that commands make
set shiftwidth=2	" i like minimal indentation. see tabstops (ts), too.
set shiftround
set expandtab
set autoindent
set tabstop=2
set softtabstop=2
set showmode	" portable method to show the current mode on bottom line
set tabstop=2	" this should be the same as the next line. not always.
set ts=2	" only indent 2 spaces. see shiftwidth (sw) above.
set terse	" no news is good news.

" where to put temporary files. good for most systems
"set directory=/tmp
" Tell vim to remember certain things when we exit
if !has('nvim')
"  '10  :  marks will be remembered for up to 10 previously edited files
"  "100 :  will save up to 100 lines for each register
"  :20  :  up to 20 lines of command-line history will be remembered
"  %    :  saves and restores the buffer list
"  n... :  where to save the viminfo files
  set viminfo='10,\"100,:20,%,n~/.viminfo
else
  " neovim ist not compatible with the viminfo-File-Format defined above
  " Do nothing here to use the neovim default (set viminfo=~/.local/share/nvim/shada/main.shada)
endif

" Have Vim jump to the last position when reopening a file
if has("autocmd")
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
     \| exe "normal! g'\"" | endif
endif


if has("autocmd")
	" perl
	augroup perl
		au FileType perl setlocal equalprg=perltidy\ -bl\ -q\ -l=260\ -pt=2\ -sbt=2\ -bt=2\ -bbt=2\ -nsfs\ -nwls=\".\"\ -nwrs=\".\"\ -ole=unix\ -iob\ -et=4\ -i=2
	augroup END

	" xml
	augroup xml
		au FileType xml setlocal equalprg=xmllint\ --format\ --recover\ -\ 2>/dev/null
	augroup END

	" ruby
	augroup ruby
		au FileType ruby nmap <F4> :w:!puppet-lint %
		au FileType ruby nmap <F5> :w:!ruby -c %
		au FileType ruby nmap <F6> :w:!rvm all do bundle exec rake
	augroup END

	" markdown
	augroup md
		autocmd FileType mkd setlocal tw=0
		autocmd FileType mkd setlocal nocursorline
	augroup END
endif

" CTRL-P
" let g:ctrlp_by_filename = 1
let g:ctrlp_open_new_file = 't'
" switch ctrl-t and cr new tab/this tab
let g:ctrlp_prompt_mappings = {
    \ 'AcceptSelection("e")': ['<c-t>'],
    \ 'AcceptSelection("t")': ['<cr>', '<2-LeftMouse>'],
    \ }

" airline
let g:airline_powerline_fonts = 1


" insert mode
map <C-t> <Esc>:tabnew
map <C-right> <Esc>:tabnext
map <C-left> <Esc>:tabprevious

if filereadable("~/.config/vim/vimrc_local")
  source ~/.config/vim/vimrc_local
endif
